


#include <stdlib.h>
#include <stdio.h>
#include "main.h"

/********
PROCEDURES pour créer une ListeSommet
*******/
void ajouterAreteValuee(Sommet *s1, Sommet *s2, int v) { // Ajoute une arrête étiqueté V entre deux sommets s1 et s2
    Arete *a = (Arete *)malloc(sizeof(Arete));
    Adjacents *adj1 = (Adjacents *)malloc(sizeof(Adjacents));
    Adjacents *adj2 = (Adjacents *)malloc(sizeof(Adjacents));
    if (s1==NULL || s2==NULL) return;
    a->som1 = s1;
    a->som2 = s2;
    a->marque = 0;
    a->valeur = v;
    adj1->arete = a;
    adj2->arete = a;
    adj1->suivant = s1->adj;
    adj2->suivant = s2->adj;
    s1->adj = adj1;
    s2->adj = adj2;
}


void ajouterArcValuee(Sommet *s1, Sommet *s2, int v) { // Ajoute un arc étiqueté V entre deux sommets s1 et s2 ;  S1 : extrémité initiale et S2 : extrémité finale

    Arete *a = (Arete *)malloc(sizeof(Arete));
    Adjacents *adj1 = (Adjacents *)malloc(sizeof(Adjacents));
    if (s1==NULL || s2==NULL) return;
    a->som1 = s1;
    a->som2 = s2;
    a->marque = 0;
    a->valeur = v;
    adj1->arete = a;
    adj1->suivant = s1->adj;
    s1->adj = adj1;
}


void ajouterArete(Sommet *s1, Sommet *s2) { // Fait appel à la procédure“ajouterAreteValuee“ pour ajouter une arrête étiqueté 0
    ajouterAreteValuee(s1, s2, 0);
}

/**
Procedure supplémentaire pour afficherListeSommet
**/

void afficherSommet(Sommet *s)
{
    printf("# %d", s->num);

}
/*******/

/** a faire **/
void affichierListeSommet(ListeSommet *file) {
 //à faire
 printf("File : ");
 while(file != NULL) {
        int test = file->debut->num;
        printf("# %d", test);
        afficherSommet(file->debut);// cf procedure afficherSommet(Sommet *s) au dessus
        file = file->suivant;
 }
        printf("\n");

}

Sommet * chercherSommet(ListeSommet *gr, int j){
   while(gr != NULL) { // parcourir la liste
        if (j == gr->debut->num) {
                return gr->debut;
        }
          gr = gr->suivant;
 }
     return NULL;
}

/*****/



void ajouterAreteValueeInt(ListeSommet *gr, int i, int j, int v) { // Ajoute une arrête étiqueté v entre les sommets dont les numéros sont i et j, de la liste des sommets gr
    ajouterAreteValuee(chercherSommet(gr, i), chercherSommet(gr, j), v);
}


void initMarqueSommet(ListeSommet *gr, int i) { // Initialise la marque de chaque sommet, de la liste de sommet gr, à une même valeur i
    for (; gr!=NULL; gr = gr->suivant) gr->debut->marque=i;

}


void initMarqueArete(ListeSommet *gr, int i) { // Initialise la marque de chaque arrête de chaque sommets, dans la liste de sommet gr, à une même valeur i
    while (gr != NULL) {
            Adjacents *ladj = gr->debut->adj;
            while (ladj != NULL) {
                    ladj->arete->valeur=i;
                    ladj = ladj->suivant; }
            gr = gr->suivant;
    }

}


Sommet * creerSommet(int n){ //Creer  un sommet dont le numéro est n
    Sommet *s = (Sommet *)malloc(sizeof(struct Sommet));
    s->num = n;
    s->marque = 0;
    s->adj = NULL;
    return s;
}


Sommet * initSommet(Sommet *s,int n){
    s->num = n;
    s->marque = 0;
    s->adj = NULL;
    return s;
}

ListeSommet * ajouterSommet(ListeSommet *g, Sommet *s) { // Ajoute le sommet S en paramètre à la liste des sommets G
    ListeSommet *g1 = (ListeSommet *)malloc(sizeof(ListeSommet));
    g1->debut = s;
    g1->suivant = g;
    return g1;
}

ListeSommet * ajouterSommetInt(ListeSommet *g, int n) { // Créer un sommet dont le numéro est n et ajoute ce sommet à la liste des sommets G

    return ajouterSommet(g, creerSommet(n));
}

/********

PROCEDURES  pour pile et file

*******/

Maillon * nouvelleFilePile( ){ return NULL; }



void affichierFile(Maillon *file) {

 printf("File : ");
 while (file != NULL) {
        printf("# %d", (file->val)->num);
        file = file->suiv;
 }
        printf("\n");

}
/** a faire **/

Maillon *enfiler(Maillon *file, Sommet *s) {
  // à faire
  Maillon *p = (Maillon *)malloc(sizeof(Maillon));
  p->val = s;
  p->suiv = NULL;
  if (file == NULL) *file = *p;
  else {
        Maillon *t = file;
        while (t->suiv != NULL) t = t-> suiv;
        t->suiv = p;
      }
      return file;
}


Maillon * defiler(Maillon *file) {
// à faire
Maillon *p= (Maillon *)malloc(sizeof (Maillon));
p=file;
file=file->suiv;
free(p);
return file;
   /*  if (file != NULL)
   {

    Maillon *p=file;
    file=file->suiv;
    return p->val;
   }
     return NULL;*/

}

Sommet *lastFile(Maillon *file)
{
    return (*file).val;
}

void empiler(Maillon *file, Sommet *s) {
    // à faire

    Maillon *p = (Maillon *)malloc(sizeof(Maillon));
  p->val = s;
  p->suiv = file;
 // if (pile == NULL) *pile = *p;
 file=p;


}

Sommet * depiler(Maillon *pile) {
     // à faire

      if (pile != NULL)
   {

    Maillon *p=pile;
    pile=pile->suiv;
    return p->val;
   }
     return NULL;


}
void parcoursLargeur(Sommet *s){
// à faire
     Maillon *file =NULL;
     if (s==NULL)return;
     file = enfiler(file, s);
     //file = Lastfile(file, s);
     while (file!=NULL)
     {
         //afficherFile(file);

         s=file->val;
         file=defiler(file);
         s->marque=1;
         printf("%d", s->num);
         Adjacents *ladj= s->adj;
         while (ladj !=NULL)
         {
             Sommet *t;
             //Sommet *t=(ladj->Arrete->som1
            if (ladj->arete->som1->num== s->num)
            {
                t=ladj->arete->som2;

            }else {t=ladj->arete->som1;
            }
            if (t->marque != 1) file=enfiler(file, t)
         ;
         t->marque=1;
         ladj = ladj->suivant;}
     }
}

ListeSommet * GrapheNonOriente(ListeSommet *g) { // Créer le graphe non orienté étudié et retourne la liste de sommets complète

if (g==NULL)
   {Sommet *s1 = creerSommet(1);
   g = ajouterSommet(g,s1);
   //g->debut = s1;

   Sommet *s2 = creerSommet(2);
   g = ajouterSommet(g,s2);

   Sommet *s3 = creerSommet(3);
   g = ajouterSommet(g,s3);

   Sommet *s4 = creerSommet(4);
   g = ajouterSommet(g,s4);

   Sommet *s5 = creerSommet(5);
   g = ajouterSommet(g,s5);

   Sommet *s6 = creerSommet(6);
   g = ajouterSommet(g,s6);

   Sommet *s7 = creerSommet(7);
   g = ajouterSommet(g,s7);

   Sommet *s8 = creerSommet(8);
   g = ajouterSommet(g,s8);

     ajouterAreteValuee(s1, s3, 12);
     ajouterAreteValuee(s1, s2, 16);

     ajouterAreteValuee(s2, s5, 8);
     ajouterAreteValuee(s2, s4, 8);

     ajouterAreteValuee(s3, s4, 12);

     ajouterAreteValuee(s4, s5, 10);

     ajouterAreteValuee(s5, s7, 7);
     ajouterAreteValuee(s5, s6, 4);


     ajouterAreteValuee(s6, s7, 2);
     ajouterAreteValuee(s7, s8, 8);

    parcoursLargeur(s1);
     }
     return g;
}



void GrapheOriente(ListeSommet *g) { // Créer le graphe orienté étudié et retourne la liste de sommets complète

    Sommet *s1 = creerSommet(1);
    g = ajouterSommet(g,s1);
    g->debut = s1;

    Sommet *s2 = creerSommet(2);
    g = ajouterSommet(g,s2);

    Sommet *s3 = creerSommet(3);
    g = ajouterSommet(g,s3);

    Sommet *s4 = creerSommet(4);
    g = ajouterSommet(g,s4);

    Sommet *s5 = creerSommet(5);
    g = ajouterSommet(g,s5);

    Sommet *s6 = creerSommet(6);
    g = ajouterSommet(g,s6);

   Sommet *s7 = creerSommet(7);
   g = ajouterSommet(g,s7);

   Sommet *s8 = creerSommet(8);
   g = ajouterSommet(g,s8);


    ajouterArcValuee(s1, s2, 1);

    ajouterArcValuee(s2, s5, 1);
    ajouterArcValuee(s2, s3, 1);

    ajouterArcValuee(s3, s7, 1);
    ajouterArcValuee(s3, s4, 1);

    ajouterArcValuee(s4, s8, 1);
    ajouterArcValuee(s4, s3, 1);

    ajouterArcValuee(s5, s6, 1);
    ajouterArcValuee(s5, s1, 1);

    ajouterArcValuee(s6, s7, 1);

    ajouterArcValuee(s7, s6, 1);

    ajouterArcValuee(s8, s7, 1);
    ajouterArcValuee(s8, s4, 1);


}


ListeSommet * nouvelleListeSommet() { return NULL; }


ListeSommet * ConstruireGraphe(ListeSommet *g) {
     int i;
     for (i=1; i<=8; i++) {
            g = ajouterSommetInt(g,i);
     }
     ajouterAreteValueeInt(g, 1, 2, 16);
     ajouterAreteValueeInt(g, 1, 3, 12);
     ajouterAreteValueeInt(g, 2, 4, 8);
     ajouterAreteValueeInt(g, 2, 5, 8);
     ajouterAreteValueeInt(g, 3, 4, 12);
     ajouterAreteValueeInt(g, 4, 5, 10);
     ajouterAreteValueeInt(g, 5, 6, 4);
     ajouterAreteValueeInt(g, 5, 7, 7);
     ajouterAreteValueeInt(g, 6, 7, 2);
     ajouterAreteValueeInt(g, 7, 8, 8);
     return g;
}


/********
PROCEDURES de parcours
*******/






void parcoursProfondeurIteratif(Sommet *s){ // post-visit
// à faire
}


void parcoursProfondeurRecursif(Sommet *s) { // post visit
    Adjacents *ladj = s->adj;
    if (s->marque == 1) return;
    printf("%d ", s->num);
    s->marque = 1;
    while (ladj != NULL) {
            Sommet *t;
            //Sommet *t= (ladj->arete->som1->num==s->num) ? ladj->arete->som2 : ladj->arete->som1;
            if (ladj->arete->som1->num==s->num){
                t=  ladj->arete->som2;
            }else {
                t=  ladj->arete->som1;
            }
            parcoursProfondeurRecursif(t);
            ladj = ladj->suivant;
        }
}

/********
PROCEDURES de connexité
*******/

int est_Connexe(ListeSommet *g){
// à faire
}

int est_fortementConnexe(ListeSommet *g){
// à faire
}

//bonus
CFC Composante_fortementConnexe(ListeSommet *g){
// à faire
//return;
}


/********
STRUCTURE & PROCEDURE chemin plus court ( point bonus )
*******/

void dijkstra(ListeSommet *g, int n){
// à faire point bonus
}
/*
int main(){

Maillon *file = NULL;
ListeSommet *g = nouvelleListeSommet();
g =  (ListeSommet *)malloc(sizeof(ListeSommet));

printf("resultats graphe non oriente g");

GrapheNonOriente(g);
printf("parcours en profondeur g (recursif) : ");
parcoursProfondeurRecursif(chercherSommet(g,1));


printf("\n\n");
printf("parcours en profondeur g (iteratif) : ");
parcoursProfondeurIteratif(chercherSommet(g,1));


printf("\n\n");
printf("parcours en largeur g : ");
parcoursLargeur(chercherSommet(g,1));

printf("\n\n");
parcoursLargeur(g->debut);
if(est_Connexe(g)){
    printf("g est un graphe connexe");
}else{
    printf("g n'est pas un graphe connexe");
}

printf("\n\n");
printf("resultats graphe oriente g2");

ListeSommet *g2 = nouvelleListeSommet();
g = (ListeSommet *)malloc(sizeof(ListeSommet));

printf("\n\n");
GrapheOriente(g2);

printf("parcours en profondeur g2 (recursif) : ");
parcoursProfondeurRecursif(chercherSommet(g,1));

printf("\n\n");
printf("parcours en profondeur g2 (iteratif) : ");
parcoursProfondeurIteratif(chercherSommet(g,1));


printf("\n\n");
printf("parcours en largeur g2 : ");
parcoursLargeur(chercherSommet(g,1));


printf("\n\n");
if (est_fortementConnexe(g2)){
    printf("g2 est un graphe fortement connexe");
}else{
    printf("g2 n'est pas un graphe fortement connexe");
}


//....

}*/

int main(){

Maillon *file = NULL;
ListeSommet *g = nouvelleListeSommet();
 g= GrapheNonOriente(g);




//parcoursProfondeurRecursif(chercherSommet(g,1));
}


